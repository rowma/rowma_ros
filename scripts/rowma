#!/usr/bin/env python

import rospy
import socketio
from rosbridge_library.rosbridge_protocol import RosbridgeProtocol
import signal
import os
import logging
import sys
import roslib
import rostopic
from fluent import sender
import time
import json
import ast
import rospkg

from lib import logging_handler
from lib import utils
from lib import socket_controller

if os.environ.get('ROWMA_DEBUG', False):
    log_level = logging.DEBUG
    rospy_log_level = rospy.DEBUG
else:
    log_level = logging.ERROR
    rospy_log_level = rospy.ERROR

logging.basicConfig(level=log_level)
logger = logging.getLogger(__name__)
logger.setLevel(log_level)
logging.getLogger(__name__).addHandler(logging_handler.ConnectPythonLoggingToROS())
logging.getLogger(__name__).setLevel(log_level)

rospy.init_node('rowma', log_level=rospy_log_level)
client_id_seed = 0
protocol = RosbridgeProtocol(client_id_seed)

sio = socketio.Client(
    reconnection=True,
    reconnection_attempts=0,
    reconnection_delay=1,
    reconnection_delay_max=30,
    logger=logger,
    engineio_logger=logger
)

if os.environ.get('API_KEY'):
    nms = '/rowma_robot'
else:
    nms = '/rowma'

yaml_path = utils.config_file_path(sys.argv, os.getcwd())
subscribers = utils.get_subscribers_from_yaml(yaml_path) or []
for subscriber in subscribers:
    sub = { 'topic': subscriber.get('topic'),
            'destination': subscriber.get('destination'),
            'op': 'subscribe'
          }
    alias = subscriber.get('alias')
    if alias: sub.update({ 'alias': alias })
    message = ast.literal_eval(json.dumps(sub))
    protocol.incoming(json.dumps(sub))

sc = socket_controller.SocketController('', subscribers, sio, nms)

def fluentd_subscriber_callback(data, topic_name):
    host = os.environ.get('ROWMA_FLUENTD_HOST', 'localhost')
    port = os.environ.get('ROWMA_FLUENTD_PORT', 24224)
    logger = sender.FluentSender('app', host=host, port=port)
    cur_time = int(time.time())
    log_params = {
            'uuid': sc.id,
            'topic': topic_name,
            'msg': json.dumps(data.data)
            }
    if not logger.emit_with_time('rowma_received_rostopic', cur_time, log_params):
        utils.print_error(logger.last_error)
        logger.clear_last_error()

if os.environ.get('ROWMA_FLUENTD_ENABLED', False):
    fluentd_stream_topics = utils.get_fluentd_stream_topics(yaml_path)
    for topic in fluentd_stream_topics:
        data_type = rostopic.get_topic_type(topic.get('topic'), blocking=False)[0]
        data_class = rospy.AnyMsg
        if data_type:
              data_class = roslib.message.get_message_class(data_type)
        rospy.Subscriber(topic.get('topic'), data_class, fluentd_subscriber_callback, callback_args=topic.get('topic'))

def file_output_subscriber_callback(data, file_output):
    log_params = {
            'uuid': sc.id,
            'topic': file_output[0],
            'msg': json.dumps(data.data),
            'timestamp': int(time.time())
            }

    output_path = file_output[1]
    if os.path.exists(output_path):
        output_path = os.path.join(os.getcwd(), file_output[1])
    with open(output_path, 'a') as f:
        f.write(json.dumps(log_params) + "\n")

file_outputs = utils.get_file_outputs(yaml_path) or []
for output in file_outputs:
    data_type = rostopic.get_topic_type(output.get('topic'), blocking=False)[0]
    data_class = rospy.AnyMsg
    if data_type:
          data_class = roslib.message.get_message_class(data_type)
    rospy.Subscriber(output.get('topic'), data_class, file_output_subscriber_callback, callback_args=(output.get('topic'), output.get('filepath')))

@sio.event(namespace=nms)
def connect():
    sc.connect()
    sc.set_reconnecting(False)

@sio.on('robot_registered', namespace=nms)
def on_message(data):
    sc.robot_registered(data)

@sio.on('err', namespace=nms)
def on_message(data):
    utils.print_error(data.get('error'))
    # TODO: More smart exit
    os._exit(1)

@sio.on('rostopic', namespace=nms)
def on_message(data):
    sc.rostopic(data, protocol)

@sio.on('run_launch', namespace=nms)
def on_message(data):
    sc.run_launch(data)

@sio.on('run_rosrun', namespace=nms)
def on_message(data):
    sc.run_rosrun(data)

@sio.on('kill_rosnodes', namespace=nms)
def on_message(data):
    sc.kill_rosnodes(data)

@sio.on('unsubscribe_rostopic', namespace=nms)
def on_message(data):
    sc.unsubscribe_rostopic(data)

@sio.on('add_script', namespace=nms)
def on_message(data):
    sc.add_script(data)

@sio.event(namespace=nms)
def disconnect():
    sc.set_reconnecting(True)

def signal_handler(sig, frame):
    sc.signal_handler()

def outgoing_func(message, compression=None):
    sc.outgoing_func(message)

protocol.outgoing = outgoing_func

server_url = os.environ.get('ROWMA_SERVER_URL', 'https://rowma.moriokalab.com')
sio.connect(server_url)

r = rospkg.RosPack()
manifest = r.get_manifest('rowma_ros')
rowma_ros_version = manifest.version
utils.print_debug("rowma_ros version " + rowma_ros_version)

signal.signal(signal.SIGINT, signal_handler)
signal.pause()
